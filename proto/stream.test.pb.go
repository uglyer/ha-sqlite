// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.5
// source: stream.test.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamPingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamPingRequest) Reset() {
	*x = StreamPingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPingRequest) ProtoMessage() {}

func (x *StreamPingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stream_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPingRequest.ProtoReflect.Descriptor instead.
func (*StreamPingRequest) Descriptor() ([]byte, []int) {
	return file_stream_test_proto_rawDescGZIP(), []int{0}
}

func (x *StreamPingRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type StreamPingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *StreamPingResponse) Reset() {
	*x = StreamPingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stream_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamPingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPingResponse) ProtoMessage() {}

func (x *StreamPingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_stream_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPingResponse.ProtoReflect.Descriptor instead.
func (*StreamPingResponse) Descriptor() ([]byte, []int) {
	return file_stream_test_proto_rawDescGZIP(), []int{1}
}

func (x *StreamPingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_stream_test_proto protoreflect.FileDescriptor

var file_stream_test_proto_rawDesc = []byte{
	0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x32, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x32, 0x8a, 0x01, 0x0a, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x50, 0x69, 0x6e,
	0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x39, 0x0a, 0x0a,
	0x50, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x67, 0x6c, 0x79, 0x65, 0x72, 0x2f, 0x68, 0x61, 0x2d,
	0x73, 0x71, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stream_test_proto_rawDescOnce sync.Once
	file_stream_test_proto_rawDescData = file_stream_test_proto_rawDesc
)

func file_stream_test_proto_rawDescGZIP() []byte {
	file_stream_test_proto_rawDescOnce.Do(func() {
		file_stream_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_stream_test_proto_rawDescData)
	})
	return file_stream_test_proto_rawDescData
}

var file_stream_test_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stream_test_proto_goTypes = []interface{}{
	(*StreamPingRequest)(nil),  // 0: StreamPingRequest
	(*StreamPingResponse)(nil), // 1: StreamPingResponse
}
var file_stream_test_proto_depIdxs = []int32{
	0, // 0: StreamTest.PingDoubleStream:input_type -> StreamPingRequest
	0, // 1: StreamTest.PingStream:input_type -> StreamPingRequest
	1, // 2: StreamTest.PingDoubleStream:output_type -> StreamPingResponse
	1, // 3: StreamTest.PingStream:output_type -> StreamPingResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stream_test_proto_init() }
func file_stream_test_proto_init() {
	if File_stream_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stream_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stream_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamPingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stream_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stream_test_proto_goTypes,
		DependencyIndexes: file_stream_test_proto_depIdxs,
		MessageInfos:      file_stream_test_proto_msgTypes,
	}.Build()
	File_stream_test_proto = out.File
	file_stream_test_proto_rawDesc = nil
	file_stream_test_proto_goTypes = nil
	file_stream_test_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamTestClient is the client API for StreamTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamTestClient interface {
	PingDoubleStream(ctx context.Context, opts ...grpc.CallOption) (StreamTest_PingDoubleStreamClient, error)
	PingStream(ctx context.Context, in *StreamPingRequest, opts ...grpc.CallOption) (StreamTest_PingStreamClient, error)
}

type streamTestClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamTestClient(cc grpc.ClientConnInterface) StreamTestClient {
	return &streamTestClient{cc}
}

func (c *streamTestClient) PingDoubleStream(ctx context.Context, opts ...grpc.CallOption) (StreamTest_PingDoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamTest_serviceDesc.Streams[0], "/StreamTest/PingDoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTestPingDoubleStreamClient{stream}
	return x, nil
}

type StreamTest_PingDoubleStreamClient interface {
	Send(*StreamPingRequest) error
	Recv() (*StreamPingResponse, error)
	grpc.ClientStream
}

type streamTestPingDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *streamTestPingDoubleStreamClient) Send(m *StreamPingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamTestPingDoubleStreamClient) Recv() (*StreamPingResponse, error) {
	m := new(StreamPingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamTestClient) PingStream(ctx context.Context, in *StreamPingRequest, opts ...grpc.CallOption) (StreamTest_PingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamTest_serviceDesc.Streams[1], "/StreamTest/PingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamTestPingStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamTest_PingStreamClient interface {
	Recv() (*StreamPingResponse, error)
	grpc.ClientStream
}

type streamTestPingStreamClient struct {
	grpc.ClientStream
}

func (x *streamTestPingStreamClient) Recv() (*StreamPingResponse, error) {
	m := new(StreamPingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamTestServer is the server API for StreamTest service.
type StreamTestServer interface {
	PingDoubleStream(StreamTest_PingDoubleStreamServer) error
	PingStream(*StreamPingRequest, StreamTest_PingStreamServer) error
}

// UnimplementedStreamTestServer can be embedded to have forward compatible implementations.
type UnimplementedStreamTestServer struct {
}

func (*UnimplementedStreamTestServer) PingDoubleStream(StreamTest_PingDoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingDoubleStream not implemented")
}
func (*UnimplementedStreamTestServer) PingStream(*StreamPingRequest, StreamTest_PingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingStream not implemented")
}

func RegisterStreamTestServer(s *grpc.Server, srv StreamTestServer) {
	s.RegisterService(&_StreamTest_serviceDesc, srv)
}

func _StreamTest_PingDoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamTestServer).PingDoubleStream(&streamTestPingDoubleStreamServer{stream})
}

type StreamTest_PingDoubleStreamServer interface {
	Send(*StreamPingResponse) error
	Recv() (*StreamPingRequest, error)
	grpc.ServerStream
}

type streamTestPingDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *streamTestPingDoubleStreamServer) Send(m *StreamPingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamTestPingDoubleStreamServer) Recv() (*StreamPingRequest, error) {
	m := new(StreamPingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StreamTest_PingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamTestServer).PingStream(m, &streamTestPingStreamServer{stream})
}

type StreamTest_PingStreamServer interface {
	Send(*StreamPingResponse) error
	grpc.ServerStream
}

type streamTestPingStreamServer struct {
	grpc.ServerStream
}

func (x *streamTestPingStreamServer) Send(m *StreamPingResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StreamTest",
	HandlerType: (*StreamTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingDoubleStream",
			Handler:       _StreamTest_PingDoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PingStream",
			Handler:       _StreamTest_PingStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stream.test.proto",
}
